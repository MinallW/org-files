* Cascading Style Sheets (CSS)

  Describes the style of an HTML document

  Describe how HTML elements should be displayed on screen, paper, or in other
  media

  CSS can control the layout of multiple web pages all at one

  Used to define styles for your web pages, including the design, layout and
  variations in display for different devides and screen sizes

  HTML is not intended to contain tags for formatting a web page, it was created
  to describe the content of a web page

  CSS rule-set consist of a selector3 and a declaration block:

  #+begin_src css
  h1  {color:blue; font-size:12px;}
  #+end_src
  
  Selector points to the HTML element that you want to style

  A declaration block contains one or more declarations separated by semicolons

  Each declaration includes a CSS property name and value, separated by a colon.

  Declarations always end with a semicolon, and declaration blocks are
  surrounded by curly braces.

  Its comments start with /* and end with */.

  CSS selectors are used to find the HTML elements you want to style, we have:

  - Simple Selectors :: elements based on name, id or class
  - Combinator selectors :: based on a specific relationship between them
  - Pseudo-class selectors :: based on a certain state
  - Attribute selectors :: based on an attribute or attribute value

  To select by element, just call it, for example, for a paragraph element, p.

  To select by id, # is needed at the beginning

  To select by class, a . is needed at the beginning

  p.center means only p elements with class "center"

  Elements can have more tan one class, like <p class="center large">

  Class names can't start with a number

  *, its an universal selector, selects all elements on the page

  We can group elements, like h1, h2, p {}

  To link to an CSS file in HTML, we add:
  
  #+begin_src html

    <link href="style.css" rel="stylesheet" type="text/css"/>

  #+end_src

  If two properties for an element are present, the latter will work. For
  example, if a <style> tag with a property is made after the link to an css
  file, this tag will work, if it is created before linking of a css file, it
  won't.

  Background properties are used to define the background effects for elements.

  By default, the image in background-image will cover the entire element. It
  specifies an image to use as the background of an element.

  background-repeat repeats the background image both horizontically and
  vertically. x for horizontically, y for vertically. Or no-repeat for no
  repetition.

  background-attachment specifies wether the background image should scroll or
  be fixed.

  Using shorthand property we can specify all the background properties in one
  single code.

  Using shothand property the order is:
  - background-color
  - image
  - repeat
  - attachment
  - position

  background-clip specifies the painting area of the background

  border properties allows us to specify style, width and colot of an element's
  border.

  border-style has several types of borders:

  - dotted :: dotted border
  - dashed :: dashed border
  - solid :: solid border
  - double :: double border
  - groove :: 3D grooved border. Effect depends on border-color value
  - ridge :: 3D ridged border. .....................................
  - inset :: 3D inset border. .....................................
  - outset :: 3D outset border. ....................................
  - none :: no border
  - hidden :: hidden border

  border-style can have from one to four values, for every side of the border.

  border-width can be in px, pt, cm, em, etc. Or pre-defined values like thin,
  medium or thick. It can have 4 values for every border.

  We can also use shorthand property on borders

  border-radius for rounded borders.

  The margin propety sets the margin area on all four sides o f an element.

  individual margins with: margin-top, right, bottom and left

  Margin collapse doesn't lets us add two margins, for example, a bottom margin
  of 50px and a top margin of 20 in two elements don't result in 70px, but in
  50px.

  Padding generate space around an element's content, inside of any defined
  borders. Its individual sides are padding-top, right, bottom and left. 

  Padding and element width is done by specifying the element's content area. If
  the element has a specified width, the padding added to that element will be
  added to the total width of the element. For example, in a <div> element of
  width 300px, when added a padding of 25px, the result will be a element with a
  width of 350px, by the 25px of padding in left and right.

  


  
  

  

  #+begin_src css

    body {
        /* For Backgrounds */
        background-color: lightblue;
        background-image: url("/url/to/image.gif");
        background-repeat: repeat-x;
        background-attachment: fixed;
        background-position: right top;
        background: ;
        background-clip: ;
        background-origin: ;
        background-size: ;
        /* For Backgrounds */
        /* Shothand property */
        background: #ffffff url("img_tree.png") no-repeat right top;
        /* Shothand property */
        /* For Borders */
        border-style: dotted;
        border-style: solid;
        border-style: double;
        border-style: dotted dashed solid double;
        border-width: 2px 10px 4px 20px;
        border-color: #ffffff;
        border-top-style: dotted;
        border-right-style: dotted;
        border-bottom-style: dotted;
        border-left-style: dotted;
        border-radius: 5px;
        /* For Borders */
        /* Shothand property */
        border: 5px solid red;
        border-left: 6px solid red;
        background-color: lightgrey;
        /* Shothand property */
        /* Apply to all four sides */
        margin: 1em;
        margin: -3px;
        /* Apply to all four sides */
        /* vertical | horizontal */
        margin: 5% auto;
        /* vertical | horizontal */

        /* top | horizontal | bottom */
        margin: 1em auto 2em; 
        /* top | horizontal | bottom */

        /* top | right | bottom | left */
        margin: 2px 1em 0 auto;
        /* top | right | bottom | left */

        /* Global values */
        margin: inherit;
        margin: initial;
        margin: unset;
        /* Global values */

        margin-bottom: 100px;
        margin-top: 100px;
        margin-right: 150px;
        margin-left: 80px;
        /* Shothand property top, right, bottom, left*/
        margin: 25px 50px 75px 100px;
        /* Shothand property */
        /* Horizontally center the elemtn within its container */

        width: 300px;
        margin: auto;
        border: 1px solid red;

        /* Horizontally center the elemtn within its container */
        /* Inheriting from parent element */

        margin-left: inherit;
        /* Inheriting from parent element */

        color: white;
        text-align: center;
        font-family: verdana;
        font-size: 20px;

        /* Padding, top, right, bottom, left*/

        padding-top: 50px;
        padding: 25px 50px 75px 100px;
        /* Padding */

        /* at work */

        overflow: hidden0;
        text-decoration: none;
        font-size: 18px;
        box-shadow: ;
        margin: ;



        /* at work */



    }
    /* For responsiveness */
    @media screen and (x-width: 500px) {
        .header a {
            float: none;
            display: block;
            text-align: left;
        }
        .header-right {
            float: none;
        }
    }
  #+end_src

  In a box, one can think of margin as the separation of the box from the
  outside world. Padding is the separation between the content and its borders.
  And border is the border of the box

  display specifies the display behavior, of an element.

  While HTML sorts out the page structure, CSS defines how HTML elements are
  displayed.

  CSS allows separation of style of content

  For inline style:

  #+begin_src html
    <p style="color:white; background-color:gray;">
      Example of white text with gray background
    </p>
  #+end_src
  
  Internal css is inside the head section of an HTML page.
  
  #+begin_src html
    <html>
      <head>
        <style>
          p{
          color: white;
          background-color: gray;
          }
        </style>
      </head>
      <body>
        <p>
          Something
        </p>
        <p>
          Another test
        </p>
      </body>
    </html>
  #+end_src
  
  The final appearance of a web page is a result of different styling rules.
  THere are thre main sources of style information that form a cascade, these
  are:

  - The stylesheet created by the author of the page
  - The browser's default styles
  - Styles specified by the user

  On terms of website optimization, it's better to have an external CSS file
  than an inline CSS or an internal line CSS.

  The style definition rule consist of selector, property and value.

      p         { color:           white; }
  Selector       property         value
  
* font properties
 
** font-family

   Specifies the font for an element, There are two types of font family names:

   - font family :: specifies font family (Times New Roman or Arial)
   - generic family ::  group of font families with a similar look (Serif or
     Monospace)

   #+begin_src html


     <html>
       <head>
         <style>
           p.serif {
           font-family:"Times New Roman", Times, serif ;
           }
           p.sansserif { Helvetica, Arial, sans-serif;}
           p.monospace { "Courier New", Courier, monospace;}
           p.cursive { Florence, cursive;}
           p.fantasy { font-Blippo, fantasy;}
           body{
           font-family: Arial, "Helvetica Neue", Helvetica, sans-serif;
 }
         </style>
       </head>
     <body>

       <p class="serif">
         Serif font
       </p>
       <p class="sansserif">
         Sans-serif font
       </p>
       <p class="monospace">
         monospace font
       </p>
       <p class="cursive">
         cursive font
       </p>
       <p class="fantasy">
         fantasy font
       </p>
  
     </body>
     </html>
   #+end_src

   In body, if the browser doesn't support the font Arial, it will try the next
   fonts, Helvetica Neue and then Helvetica. If it doesn't have any of them, it
   will try the generic sans-serif.

** font-size
   
   One can use keywords as small, medium, large and x-large;.
   font-size: 5px;

** font-style

   Specifies style of text, italic, for example. Other styles are normal or oblique.

   font-style: italic;

** font-weight

   Controls boldness or thickness of text. Values such as 5px, normal, bold, One
   can define a number from 100 (thin) to 900(thick)
   bolder and lighter
   font-weight: bolder;
   font-weight: 300;

** font-variant

   Converts your font to all small caps. Values such as normal, small-caps and
   inhetir.

   font-varian: small-caps;

** color

   Color of text, like green, blue or #FFFFFF

** text-align

   Specifies the horizontal alignment of a text in an element. By default text
   alignes to the left. One can use left, right, center and justify.

   text-align: center;

   In justify, each line is stretched so that every line has equal width, and the
   left and right margins are straight.
  
** vertical-align

   Sets an element's vertical alignment. top, middle or bottom. ALso values as
   baseline, sub, super, % and px. In some elements, such as div, one would have
   to add display:inline-table and table-cell to make vertical-align property
   work with divs

   #+begin_src html

     <html>
       <head>
         <title>No</title>
         <style>
           .main{
           height:150px; width:400px;
           background-color: LightSkyBlue;
           display:inline-table;
           }
           .paragraph{
           display:table-cell;
           vertical-align: middle;
           }
         </style>
       </head>
       <body>
         <div class="main">
           <div class="paragraph">
             Text aligned to the middle
           </div>
         </div>
    
       </body>
     </html>

   #+end_src

** text-decoration

   Specifies how text will be decorated, values are:

   - none :: normal text, default value
   - inherit :: inherit from parent element
   - overline :: draws horizontal line above text
   - underline :: horizontal line below text
   - line-through :: horizontal line through text
   - blink :: Makes text blink, deprecated.

     One can combine values in a space-separated list

** text-indent

   specifies how much horizontal space should be left before the beginning of the
   first line of the text. values are length in px and other values, % and
   inherit. Negatives are allowed. The first line will be indented to the left if
   the value is negative.

   text-indent: 60px;

** text-shadow

   Adss shadow to text, it takes four values, the first defines the distance of
   the shadow in the x (horizontal) direction, the second in y. The third defines
   the blur of the shadow and the fourth its color.

   h1{ color:blue; font-size: 30pt; text-shadow: 5px 2px 4px grey;}

   One can add more than one shadow to the text., adding a comma=separated list
   of shadows.

** text-transform

   Specifies how to capitalize an element's text. It can be used to make text
   appear with each word capitalized. Other calues are uppercase and lowercase.

   text-transform: capitalize;

** letter-spacing

   Specify space between characters in a text. Values such as normal, pv and
   inherit.

   letter-spacing: 4px;

   negative values are permitted.

   karix.io faulty, try sometime.
** word-spacing

   Specify space betwene words in a text. values such as normal, length and
   inherit.

   word-spacing: 30px;

** white-space

   Specifies how white=space inside an element is handled. Values such as normal,
   inherit, pre, pre-line, pre-wrap, nowrap. The latter makes the text contienue on the same line until a
   <br> tag is encountered, and also collapses all sequences of whitespace into a
   single whitespace.

* Properties

** CSS Box Model

   All HTML elements can be considered as boxes. It consists of margins,
   borders, paddings and the actual content.

   The total width of an element is its width plus padding left and padding
   right, plus left and right borders and left and right margins.

   width and height properties sets the value only to the content area.

   When setting background-color to a box, it covers the content area, as well
   as the padding.

   Its total height being the same, plus margin, border and padding.

** border

   defines border element, accepts values such as size, style and color. Its
   default value is none. For styling, values such as dotted, dashed, double,
   etc.

   border-width: solid;
   border-color: #FFFFFF;
   border-style: dotted;

** Width and Height

   To set minimun and maximun height and width of an element, one can use
   properties such as:

   - min-width ;max
   - min-height ;max
   
   min-height: 100px;
   max-width: 100px;
   
** background-color

   background-color: #FFFFFF;

** background-image

   One or several background images in an element. By default the image is
   places on the top-left corner of an element, and is repeated both vertically
   and horizontically to cover the entire element.

   background-image: url("css_logo.png");

** background-repeat

   A background repeat property specifies how background images are repeated. It
   can be repeated along the horizontal axis, vertical, both axes, or not
   repeated. Can use inherit as value.
   
   background-repeat: repeat-x;
   background-repeat: repeat-y;
   background-repeat: no-repeat;

** background-attachment

   Sets wether the background image is fixed or scrolls with the rest of the
   page. Values such as inherit or scroll.

   background-attachment: fixed;

* Styling and lists

** list-style-type

   Allow us to set different list item markers. List of HTML such as <ul> styled
   with dullets or <ol> styles with numbers or letters. With list-style-type one
   can set values such as circle, square, decimal, disc, lower-alpha, etc.

   list-style-type: circle;

** list-style-image and list-style-position

   The first, specifies the image to be used, the latter, its position. outside
   is the default value of inside.

   list-style-image: url("something.jpg")
   list-style-position: inside;

** list-style is its shorthand property

   list-style: square outside none;

** Table properties

   border-collapse property specifies whether the table borders are collapsed
   into a single border or separated as default. If the borders are separate,
   the border-spacing property can be used.

   border-collapse: separate;
   border-spacing: 20px 40px;

** caption-side

   Specifies the position of a table caption. Values can be set as top or
   bottom.

   caption-side: top;

** empty-cells

   Specifies whether or not to display borders and background on empty cells in
   a table. Values such as:
   
   - show :: borders of an empty cell are rendered
   - hide :: borders of an empty cell are not drawn.

** table-layout

   Specifies how the width of table columns is calculated. Its default value is
   auto, values such as:

   - auto :: when a column or cell aren't explicitly set, the column widt4h will
     be in proportion to the amount of content in the cells that make up the column
   - fixed :: When not explicitly set, the column width will not be affected by
     the amount of content in the cells that make up the column.

* Styling Links

** Setting Styles to Links

   Links can be styled differently, depending on what state they are in, its
   pseudo selectors are:

   - a:link :: On normal unvisited links
   - a:visited :: Style for visited links
   - a:active :: A link becomes active once you click on it.
   - a:hover :: When mouse hovers on it

   Some order rules are:

   a:hover MUST come after a a:link and a:visited
   a:active MUST come after a:hover

   One can remove the underline in a link, setting text-decoration to none.
   
   Some commmon properties are:

   border:none emoves border from images with links
   outline:none, removes dotted border on clicked lines in IE

   One can customize the mouse when hovered on a link, rather than the default
   pointer.

   #+begin_src html

     <spanstyle ="cursor:help"> Do you need help?</span>

   #+end_src

   It can be set to properties such as default, crosshair, pointer and some
   more.

   Links with cursor:default may mislead the client to think that they are not
   in a link.

   For no bullets, list-display-style to none.

* Positioning and Layout
  
** display: block

   display property determines how that rectangular box behaves. A block element
   is an element taking fullest width available, with line breaks before and
   after.

** display : inline

   Takes only as much width necessary, and doesn't force line breaks.

** display : none

   Hides an element, so it doesn't take up space.

** visibility property

   Specifies wheter an element is visible or hidden. These are its two values.

   visibility:hidden will hide an element, but it will still take up the same
   space as before.

** Positioning Elements

   Elements can be positioned using top, bottom, left and right properties.
   However, these won't work unless position property is set as first.

*** Static Positioning
    
    This is the default value for any element. Its position is always according
    to the normal flow of the page.

    position: static;

*** Fixed Positioning

    Positioned relative to the browser windows, and it won't move even if the
    window is scrolled. Fixed elements are removed form the normal flow. The
    document and other elements behave like the fixed positioned element does
    not exist. Also, fixed elements can overlap other elements

    position: fixed;

*** Relative Positioning

    Positioned relative to its normal position. top, right, bottom and left can
    be used to specify how the rendered bow will be shifted. Relatively
    positioned elements can be moved and overlap other elements, but the
    reserved space is still preserved in the normal flow. This value can't be
    used for table cells, columns, column groups, rows, row groups, or captions.

    position: relative;

*** Absolute Positioning

    Positioned relative to the first parent elemtn that has a position other
    than static. If no such element found, the containing block is <html>. These
    elements are removed from the normal flow, and they can overlap other
    elements.

** FLoating

   A float element can be pushed to the left or right. Allowind other elements
   to wrap around it. Often used with images, but useful when working with
   layouts. Values such as left, right and none. The latter being the default.
   Elements are floated horizontally, the element can only be floated left or
   right, not up or down.

** Elements Next to Each Other

   Placing several floating elements one after the other, will make them float
   next to each other if there's enough room. Using width so they don't colide.

** clear property

   Elements comming after a floating element will flow around it. To avoid this,
   we use the clear property. It specifies the difes of an element where other
   floating elements aren't allowed to be.

   Elements after a floating element will be affected. Values such as right,
   left and both to specify the sides on an element where other floating
   elements aren't allowed to be. By default its none, allowing floating
   elements in both sides.

   both is used to clear floats coming from either direction. 

** overflow property

   If height of any box is not set, it will grow as large as necessary to
   accommodate the content. Overflow specifies the behavior that occurs when an
   element's content overflows the element's box. Values such as visible,
   scroll, hidden and auto.

   scroll results in clipped overflow, but a scrollbar is added.

   overflow: scroll;
   
   - auto :: If overflow is slipped, a scroll-bar should be added.
   - hidden :: The overflow is clipped, and the rest of the content will be
     invisible.

   By default overflow is visible.

** z-index Property

   When elements are positioned outside the normal flow, they can overlap other
   elements. z-index specifies the stack order of an element. For example, two
   boxes, the latter with relative position will overlap the first box. z-index
   can change this behavior.

   Assigning a higher z-index for the first box and a lower to the latter, will
   make the first box to overlap the second.

   z-index: 3;

   It only works with positioned elements with position absolute, relative or
   fixed.
   
** Quiz

   Assigning top a negative value will result into the element to move upwards.
   Think of it like top makes an space on the top of one element, making it
   negative means to make less top space.

   Assigning right and left values into float makes anything else that lives in
   the containing element to flown around the element with the float element.

   overflow properties are scroll and auto.

* CSS3

  Is the latest CSS standard. it's completely backwards-compatible with earlier
  CSS versions. Some of its features are:

  - Border radius :: We can create rounded corners for elements
  - Border images :: Specifying an image as the border around an element
  - Multiple Backgrounds :: Multiple backgrouns for elements.
  - Animations and effects
  - Box Shadow :: attaching one ore mor shadows to an element by specifying
    shadow color, size, blur and offset.
  - Gradients :: Set background color of an element to gradient, being it Linear
    and Radial
  - Transforms :: We can rotate, scale,move and skew elements.
  - Transitions :: Animate from one CSS property to another. Combinint and
    animating the element's position, rotation or scale.
  - Animations :: Allow us to create keyframes, set duration, easing and more.

** CSS Vendor Prefixes

   Ussed to add support for new CSS features during periods of testing and
   experimentation. For example, for Safari and Chrome is -webkit. As long as
   border-radius is accompanied by the browser prefix, it will work on
   unsupported browsers. Some prefixes are:

   - -moz-     mozilla
   - -webkit-  safari and chrome
   - -o- opera
   - -ms- internet explorer

   -webkit-border-radius: 24px;

** border-radius property

   Sets 'rounded coreners' to elements.

   border-radius: 20px;
   border-radius: 0 0 20px 20px; 

   The latter sets only rounded corners for bottom-left and right. We can also
   use percentages.

** Creating a Circle
   
   To create a circle, the border radius should be half of the height and the
   width.

   #+begin_src css

     div{
         width: 200px;
         height: 200px;
         border-radius: 100px;
         background-color: green;
         color: white;

     }

   #+end_src

** box-shadow Property

   Applies shadow to elements, components of the box-shadow property are decoded
   by browsers in the following manner:

   - The first length for the horizontal offset will cast the shadow to the
     right of the box (required)
   - The second length is for the vertical offset, it will cast the shadow to
     below the box (required)
   - The color of the shadow (optional)

   We can also add optional values such as blur and spread.

   box-shadow: 10px 10px 5px 5px #888888;

   One can use negative values it will result in:
   
   - horizontal offset :: Shadow at the left
   - vertical :: Shador above
   - blur radius :: negatives aren't allowed
   - spread radius :: Will cause shadow to shrink

** box-shadow techniques
   
   The "inset" keyword allows to draw an inner shadow in the box. One can create
   inner and outher shadows by separating each shadow with a comma.

   box-shadow: inset 10px 10px 5px #888888;

   An examples with two inner shadows covering all the element could be:

   box-shadow:
   inset 10px 10px 5px #888888,
   inset -10px -10px 5px #888888;
   
   Specifying more than two values will make the latter value to be positioned
   at the back of all shadows.

   box-shadow: 0 0 10px 4px #FF6347,
   0 0 10px 30px #FFDAB9,
   30px 0 20px 30px #B0E0E6;

** Transparency Effect

   We can add transparency to our elements, usoing rgba:

   rgba(255,255,255,0) 0%,  0 transparent
   rgba(255,255,255,0.2) 0%, 
   rgba(255,255,255,0.5) 0%,
   rgba(255,255,255,1) 0%,  1 opaque

   
** text-shadow

   Defines one or more comma-separated shadow effects to be applied to the text
   content of the current element.

   text-shadow: 0px 5px 3px #555;

   First, comes the X-offset, then the Y-offset, the blur and the color. The
   first 2 aren't optional. The default value for color is transparent, its
   optional but it won't be seen unless specifies another color.

** Multiple Text Shadows

   Multiple shadows separated by commands will work.

   #+begin_src css

     h1{
         text-shadow: 5px 10px 2px #93968f,
                      -3px 6px 5px #58d1e3,

     }

   #+end_src

   To make shadows look realistic, remember:

   A shadow which is close to the text is normally not as blurred as a shadow
   far from the text. 

   A shadow which is close to the text implies that the underlying surface is
   close, that the light is close, or both. A close shadow is often darker than
   a distant shadow.

   Setting text-shadow to none will remove any shadows on the element.

** Pseudo-Classes

   Allow us to style elements, or part of elements, existing in the document
   tree without using JavaScript or any other scripts, they start with a ":"

   Commonly Pseudo-classes are :first-child and :last-child.

   :first-child matches an element that is the first child element of some other
   element.

   #+begin_src html

     <html>
       <head>
         <style>
           #parent p:fist-child {
           color:green;
           }
         </style>
       </head>
       <body>
         <div id="parent">
           <p>
             Something
           </p>
           <p>
             Test
           </p>
           <p>
             Another test
           </p>
         </div>
       </body>
     </html>

   #+end_src
   
   The style will only be applied to 'Something'.

   Pseudo-elements specify parts of an element. There are five pseudo elements
   in CSS, each starting with '::'.
   
   - ::first-line :: First line of the text in a selector
   - ::first-letter :: First letter on a selector
   - ::selection :: Selects the portion of an element selected by a user
   - ::before :: Insert some content before an element
   - ::after :: Content after an element

   ::moz-selection style selected elements in a text, moz is used since
   ::selection isn't supported by Mozilla yet.

   p::before {
     content: url("logo.jpg");
   }

   Adds an image after every p

** word-wrap property

   Allows long words to be broken and wrapped into the next line. Values such as
   normal and break-word.

    when break-word, a long word will be break if it's too long to fit within its
   container.

** @font-face rule

   Allow custom fonts to be loaded into a webpage. with this, fonts aren't
   limited to only those installed on a user's computer.

   Firefox, Safari, Chrome and Opera url's must go to .tff or .otf kfonts, while
   Internet explorer should point to .eot

   #+begin_src css

     @font-face{
         font-family: Delicious;
         src: url('Delicious-Roman.otf');
    
     }

   #+end_src

* Gradients and Background

** Linear Gradients

   Enable us to display smooth transitions between two or more specified colors.
   Values such as Linear and Radial.

   For one linear gradient, one must define at least two color stops. These are
   colors among whioch you want to render smooth transitions. We can also set a
   starting point and a direction -or an angle- along with the gradient effect.

   background:-moz-linear-gradient(DeepSkyBlue, Black, white, blue);

   Multiple colors can be specified using a comma. And we can specify color stop
   positions:

   background:-moz-linear-gradient(blue 20%, yellow 30%, green 85%);

   Direction of the gradient can be specifies by start at left and moving to
   right, or bottom to top.

   background:-moz-linear-gradient(left, blue, green, white);

   Combinations such as bottom right are accepted.

   Andle can be specified too.

   background:-moz-linear-gradient(100deg, blue, green, white);
   
   One can repeat one little gradient:
   
   background:-moz-repeating-linear-gradient(blue, green 20px);

** Radial Gradients

   One must define at least two color stops, The radial gradient is defind by
   its center.

   background: radial-gradient(position, shape or size, color-stops);

   For position one can use top, bottom, center or left, or 50% 50% to set the
   gradient at the senter, or 0% 0% to the left.

   The second defines the space and gradient size, values such as the default
   'ellipse' and 'circle'.

   The last value defines color combination to use.

** background-size property

   background-size: 100px 100px;

   THe first value is the width, the second the height. Values can be also none
   and contain.

** background-clip property

   Specifies the painting area of the background. Values such as:

   - border-box :: (default) background painted to the outside edge of the boder
   - padding-box :: background painted to the outside edge of the padding
   - content-box :: painted within the content box

   It can be applied to background images.

** Transparent Borders with background-clip

   A transparent border will reveal the element's own background under the
   border.
   
   background-clip: padding-box;
   border: 20px solid rgba(0,0,0,0.3);

   Will make gray transparent borders.

** Multiple Backgrounds

   Specified by a comma. The first image will appear on the top, the last on the
   bottom.

   background-image: url(csslogo.png), url(csscode.jpg)
   background-position: right bottom, left top;

   background: url(csslogo.png) right top no-repeat,
   url(csscode.jpg) left top no-repeat;
   
** opacity property

   Provides opacity to an element.

   opacity: 1;
   opacity: 0.5;
   opacity: 0.25;

* Transitions & Transforms

  Allow us to change from one property value to another over a given duration.

  - transition-property :: property to be transitioned
  - transition-duration :: duration over which transition should occur
  - transition-timing-function :: ho* Cascading Style Sheets (CSS)

  Describes the style of an HTML document

  Describe how HTML elements should be displayed on screen, paper, or in other
  media

  CSS can control the layout of multiple web pages all at one

  Used to define styles for your web pages, including the design, layout and
  variations in display for different devides and screen sizes

  HTML is not intended to contain tags for formatting a web page, it was created
  to describe the content of a web page

  CSS rule-set consist of a selector3 and a declaration block:

  #+begin_src css
  h1  {color:blue; font-size:12px;}
  #+end_src
  
  Selector points to the HTML element that you want to style

  A declaration block contains one or more declarations separated by semicolons

  Each declaration includes a CSS property name and value, separated by a colon.

  Declarations always end with a semicolon, and declaration blocks are
  surrounded by curly braces.

  Its comments start with /* and end with */.

  CSS selectors are used to find the HTML elements you want to style, we have:

  - Simple Selectors :: elements based on name, id or class
  - Combinator selectors :: based on a specific relationship between them
  - Pseudo-class selectors :: based on a certain state
  - Attribute selectors :: based on an attribute or attribute value

  To select by element, just call it, for example, for a paragraph element, p.

  To select by id, # is needed at the beginning

  To select by class, a . is needed at the beginning

  p.center means only p elements with class "center"

  Elements can have more tan one class, like <p class="center large">

  Class names can't start with a number

  *, its an universal selector, selects all elements on the page

  We can group elements, like h1, h2, p {}

  To link to an CSS file in HTML, we add:
  
  #+begin_src html

    <link href="style.css" rel="stylesheet" type="text/css"/>

  #+end_src

  If two properties for an element are present, the latter will work. For
  example, if a <style> tag with a property is made after the link to an css
  file, this tag will work, if it is created before linking of a css file, it
  won't.

  Background properties are used to define the background effects for elements.

  By default, the image in background-image will cover the entire element. It
  specifies an image to use as the background of an element.

  background-repeat repeats the background image both horizontically and
  vertically. x for horizontically, y for vertically. Or no-repeat for no
  repetition.

  background-attachment specifies wether the background image should scroll or
  be fixed.

  Using shorthand property we can specify all the background properties in one
  single code.

  Using shothand property the order is:
  - background-color
  - image
  - repeat
  - attachment
  - position

  background-clip specifies the painting area of the background

  border properties allows us to specify style, width and colot of an element's
  border.

  border-style has several types of borders:

  - dotted :: dotted border
  - dashed :: dashed border
  - solid :: solid border
  - double :: double border
  - groove :: 3D grooved border. Effect depends on border-color value
  - ridge :: 3D ridged border. .....................................
  - inset :: 3D inset border. .....................................
  - outset :: 3D outset border. ....................................
  - none :: no border
  - hidden :: hidden border

  border-style can have from one to four values, for every side of the border.

  border-width can be in px, pt, cm, em, etc. Or pre-defined values like thin,
  medium or thick. It can have 4 values for every border.

  We can also use shorthand property on borders

  border-radius for rounded borders.

  The margin propety sets the margin area on all four sides o f an element.

  individual margins with: margin-top, right, bottom and left

  Margin collapse doesn't lets us add two margins, for example, a bottom margin
  of 50px and a top margin of 20 in two elements don't result in 70px, but in
  50px.

  Padding generate space around an element's content, inside of any defined
  borders. Its individual sides are padding-top, right, bottom and left. 

  Padding and element width is done by specifying the element's content area. If
  the element has a specified width, the padding added to that element will be
  added to the total width of the element. For example, in a <div> element of
  width 300px, when added a padding of 25px, the result will be a element with a
  width of 350px, by the 25px of padding in left and right.

  


  
  

  

  #+begin_src css

    body {
        /* For Backgrounds */
        background-color: lightblue;
        background-image: url("/url/to/image.gif");
        background-repeat: repeat-x;
        background-attachment: fixed;
        background-position: right top;
        background: ;
        background-clip: ;
        background-origin: ;
        background-size: ;
        /* For Backgrounds */
        /* Shothand property */
        background: #ffffff url("img_tree.png") no-repeat right top;
        /* Shothand property */
        /* For Borders */
        border-style: dotted;
        border-style: solid;
        border-style: double;
        border-style: dotted dashed solid double;
        border-width: 2px 10px 4px 20px;
        border-color: #ffffff;
        border-top-style: dotted;
        border-right-style: dotted;
        border-bottom-style: dotted;
        border-left-style: dotted;
        border-radius: 5px;
        /* For Borders */
        /* Shothand property */
        border: 5px solid red;
        border-left: 6px solid red;
        background-color: lightgrey;
        /* Shothand property */
        /* Apply to all four sides */
        margin: 1em;
        margin: -3px;
        /* Apply to all four sides */
        /* vertical | horizontal */
        margin: 5% auto;
        /* vertical | horizontal */

        /* top | horizontal | bottom */
        margin: 1em auto 2em; 
        /* top | horizontal | bottom */

        /* top | right | bottom | left */
        margin: 2px 1em 0 auto;
        /* top | right | bottom | left */

        /* Global values */
        margin: inherit;
        margin: initial;
        margin: unset;
        /* Global values */

        margin-bottom: 100px;
        margin-top: 100px;
        margin-right: 150px;
        margin-left: 80px;
        /* Shothand property top, right, bottom, left*/
        margin: 25px 50px 75px 100px;
        /* Shothand property */
        /* Horizontally center the elemtn within its container */

        width: 300px;
        margin: auto;
        border: 1px solid red;

        /* Horizontally center the elemtn within its container */
        /* Inheriting from parent element */

        margin-left: inherit;
        /* Inheriting from parent element */

        color: white;
        text-align: center;
        font-family: verdana;
        font-size: 20px;

        /* Padding, top, right, bottom, left*/

        padding-top: 50px;
        padding: 25px 50px 75px 100px;
        /* Padding */

        /* at work */

        overflow: hidden0;
        text-decoration: none;
        font-size: 18px;
        box-shadow: ;
        margin: ;



        /* at work */



    }
    /* For responsiveness */
    @media screen and (x-width: 500px) {
        .header a {
            float: none;
            display: block;
            text-align: left;
        }
        .header-right {
            float: none;
        }
    }
  #+end_src

  In a box, one can think of margin as the separation of the box from the
  outside world. Padding is the separation between the content and its borders.
  And border is the border of the box

  display specifies the display behavior, of an element.

  While HTML sorts out the page structure, CSS defines how HTML elements are
  displayed.

  CSS allows separation of style of content

  For inline style:

  #+begin_src html
    <p style="color:white; background-color:gray;">
      Example of white text with gray background
    </p>
  #+end_src
  
  Internal css is inside the head section of an HTML page.
  
  #+begin_src html
    <html>
      <head>
        <style>
          p{
          color: white;
          background-color: gray;
          }
        </style>
      </head>
      <body>
        <p>
          Something
        </p>
        <p>
          Another test
        </p>
      </body>
    </html>
  #+end_src
  
  The final appearance of a web page is a result of different styling rules.
  THere are thre main sources of style information that form a cascade, these
  are:

  - The stylesheet created by the author of the page
  - The browser's default styles
  - Styles specified by the user

  On terms of website optimization, it's better to have an external CSS file
  than an inline CSS or an internal line CSS.

  T
