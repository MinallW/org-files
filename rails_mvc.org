#+SETUPFILE: https://fniessen.github.io/org-html-themes/setup/theme-readtheorg.setup

* Rails Modelo-Vista-Controlador

Rails, utiliza un modelo de desarrollo Modelo-Vista-Controlador o MVC para
organizar todas las partes de una aplicación, por lo que, entender cómo funciona
es necesario para la calidad de nuestra aplicación web.

- El Modelo, contiene la lógica de la aplicación y se comunica con la base de datos.

- La Vista, Compila la página que verá el usuario de acuerdo a parámetros dados.

- El Controlador, además de ser un puente de información entre el Modelo y la
  Vista, decide como manejar la petición del usuario.

Con la petición del usuario, nos referimos a que, el usuario envía un HTTP
Request a nuestro servidor. No es más que el usuario pidiendo a nuestro servidor
una página.

** ¿HTTP Request?
   
   HTTP, el protocolo más usado por los servidores web y clientes, para enviar y
   recibir páginas web, al entrar a cualquier página, tu navegar envía un HTTP
   REQUEST al servidor para que este responda con una página. Existen diferentes
   HTTP REQUESTS, usados en diferentes situaciones, los definiremos de la manera
   más sencilla para así entender mejor el Controlador.

   - GET :: Pide por una página a un servidor web
   - POST :: Envía información en Formularios de HTML, utilizado para mandar gran
     cantidad de información, o información sencible.
   - PUT :: Pide reemplazar un elemento de la página, si la acción es posible.
   - PATCH :: Pide modificar un elemento de la página.
   - DELETE :: Eliminar un elemento.

   Un simple ejemplo es, en google.com seleccionas LOGIN, tu navegador hace GET
   a los servidores de Google, quien responde con la página de Login, pero, al
   poner tus credenciales, utilizas POST para enviar tu información.

   Existen diferentes requests, y más trasfondo en estos, para simplicidad solo
   entenderemos estas definiciones.

** Ejemplo de MVC

Un usuario conectandose a nuestra página en busca de un blog en específico.   

1. El usuario hace GET a nuestro servidor. Es recibido por el Controlador

2. El Controlador decide como responder a la petición, en este caso, le enviará
   la página del blog. Le dice a la vista que compile dicha página.

3. La Vista necesita información del blog, encontrada en la base de datos. Le
   pide al Controlador buscarla.

4. El Controlador habla con el Modelo, quien obtiene la información de la base
   de datos y se la dá al Controlador, quien a su vez se la da a la Vista.

5. La Vista, al no necesitar más información, compila la respuesta y se la envía
   al usuario, transacción completada.

Se puede ver en este gráfico:

[[https://cdn-media-1.freecodecamp.org/images/1*KK61kGXrkaFBDfY7uWukyQ.png]]

Existen más elementos que juegan parte en este ejemplo, como la acción o el
enrutador, para ello citemos la documentación oficial:

"Un Controlador recibe peticiones específicas de la aplicación. El Enrutador
decide que Controlador recibe que peticiones. Por lo general, hay diferentes
rutas hacia un Controlador, y en rutas diferentes pueden haber diferentes
acciones. Cada acción recolecta información para dársela a la Vista."   

Podríamos añadir a nuestro ejemplo:

- El Enrutador recibe la petición HTTP, y decide a qué Controlador dársela, una
  vez decidido, transmite la petición.
- La Vista necesita información y usa la acción para obtenerla del modelo.

Lo bueno de Rails es, que en el MVC cada uno tiene su representación en el
código, que a su vez en una clase con ciertos métodos comunes que queramos hacer
en el elemento, hablemos de ellos:

** Action Controller

   Representa al Controlador, aquí podemos definir que acción tomar ante
   diferentes situaciones cómo, si el request del usuario es un POST o un GET, o
   hacer sesiones para que nuestra conexión se sienta 'en línea'.

   Podemos utilizar Cookies, hacer acciones de acuerdo a ciertos parámetros, y
   especificar cómo será la autenticación en nuestra página. 

** Active Record
                                    
   Representa al Modelo, veremos acciones para comunicarse con la base de datos
   y hacer cualquier operación CRUD usando el 'Mapeo Relacional de Objectos'.
   Además de tener la lógica y operaciones complejas de nuestra aplicación.

*** Operación CRUD

    Cuando hablamos de operaciones CRUD, nos referimos a 'Create, Read, Update,
    Delete', las cuatro operaciones principales que haremos en una base de datos.

*** Mapeo Relacional de Objectos

    Es una manera sencilla en la que, nuestra aplicación, teniendo una base de
    datos MySQL no tendrá que hacer código manualmente para interactuar con
    ella, o hacer cualquier operación CRUD.

    Utilizando Ruby podremos hacer cualquier operación CRUD aún manteniendo la
    base de datos con MySQL.

    
   Podemos hacer representaciones de la base de datos aquí, además de
   migraciones.

** Action View

   Representa a la Vista, nos permite manejar de manera más inteligente nuestras
   páginas web, utilizando embedded Ruby, nos permite tener código ya sea lo
   mostremos o no en la página, en nuestra página.

   Por cada Controlador, hay una Vista, y la página dada por una Vista es la unión
   de, en el ejemplo más sencillo, el parical, un diseño y una
   plantilla, en cada uno de estos elementos podemos especificar diferentes
   acciones.

   La Plantilla, representa la extensión utilizada en nuestro archivo, por ejemplo,
   el más utilizado es html con ruby embebido, html.erb nos permite hacer
   operaciones de ruby en HTML ya sea que serán mostradas o no en la página.

   El Parcial nos permite separar nuestra página en elementos que podemos luego
   reutilizar, especificando su uso en la página con una línea de código.

   El Diseño, como el nombre dice, nos permite tener diferentes diseños de una
   misma página, que serán mostrada depende a ciertos parámetros.

   Con estos tres elementos, que forman parte de la vista, podemos generar una
   aplicación web que se sienta viva.

   También tenemos métodos ayudantes que representarán cosas que querremos en
   nuestra página, cómo un formulario, la fecha, controles de radio, etc.
